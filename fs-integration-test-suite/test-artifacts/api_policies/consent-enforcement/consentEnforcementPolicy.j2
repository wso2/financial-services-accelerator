<!--
 ~ Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 ~
 ~ WSO2 LLC. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~     http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied. See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->

<!-- Storing the original request parameters for future reference -->
<property name="originalRequestJsonBody" expression="json-eval($)" scope="default" type="STRING"/>
<property name="originalRequestBody" expression="$body"/>
<property name="originalAuthorizationHeader" expression="$trp:Authorization"/>
<property name="originalContentTypeHeader" expression="$trp:Content-Type"/>
<property name="originalAcceptHeader" expression="$trp:Accept"/>

<!-- This class mediator is responsible for generating the payload for the consent validation service and is stored in the property 'consentEnforcementJwtPayload' -->
<class name="org.wso2.financial.services.apim.mediation.policies.consent.enforcement.ConsentEnforcementPayloadMediator">
    <property name="consentIdClaimName" value="{{consentIdClaimName}}"/>
</class>

<!-- Set the request payload -->
<payloadFactory media-type="text">
    <format>$1</format>
    <args>
        <arg expression="$ctx:consentEnforcementJwtPayload" />
    </args>
</payloadFactory>

<!-- Set the request headers required for calling the consent validation service -->
<header name="Authorization" scope="transport" value="Basic {{consentServiceBasicAuthCredentials}}"/>
<header name="Content-Type" scope="transport" value="application/jwt"/>
<header name="Accept" scope="transport" value="application/json"/>

<!-- Set the 'messageType' property required by the axis2 layer, this property controls how Synapse serializes the request body -->
<property name="messageType" scope="axis2" value="application/jwt"/>

<!-- Disabling default behaviour of appending the sub request path to URL -->
<property name="REST_URL_POSTFIX" scope="axis2" action="remove"/>

<!-- Call the consent validation endpoint in blocking mode -->
<call blocking="true">
    <endpoint>
        <http method="POST" uri-template="{{consentServiceBaseUrl}}/api/fs/consent/validate/validate"/>
    </endpoint>
</call>

<header name="Authorization" scope="transport" expression="$ctx:originalAuthorizationHeader"/>
<header name="Content-Type" scope="transport" expression="$ctx:originalContentTypeHeader"/>
<header name="Accept" scope="transport" expression="$ctx:originalAcceptHeader"/>

<!-- Extract required attributes from the response JSON into properties -->
<property name="isValid" expression="json-eval($.isValid)" scope="default" type="STRING"/>
<property name="modifiedPayload" expression="json-eval($.modifiedPayload)" scope="default" type="STRING"/>
<property name="consentInformation" expression="json-eval($.consentInformation)" scope="default" type="STRING"/>

<!-- Check if 'isValid' is null -->
<filter xpath="not($ctx:isValid)">
    <then>
        <!-- Setting required properties for generating the error response and sending the flow through the fault sequence -->
        <property name="ERROR_CODE" value="Internal Server Error"/>
        <property name="ERROR_TITLE" value="Consent Enforcement Error"/>
        <property name="ERROR_DESCRIPTION" value="Unexpected error occurred at the consent validation service"/>
        <property name="CUSTOM_HTTP_SC" value="500"/>
        <sequence key="fault"/>
    </then>
</filter>

<!-- Check if 'isValid' is true -->
<filter source="$ctx:isValid" regex="true">
    <then>
        <!-- Consent is valid -->
        <filter xpath="boolean($ctx:modifiedPayload)">
            <then>
                <!-- Set 'modifiedPayload' as new request body if available -->
                <payloadFactory media-type="json">
                    <format>$1</format>
                    <args>
                        <arg expression="$ctx:modifiedPayload"/>
                    </args>
                </payloadFactory>
            </then>
            <else>
                <!-- 'modifiedPayload' is null -->
                <!-- Set 'originalRequestBody' as the request body when 'modifiedPayload' is not available -->
                <filter source="$ctx:api.ut.HTTP_METHOD" regex="^(GET|DELETE)$">
                    <then>
                        <enrich>
                            <source clone="false" type="property" property="originalRequestBody"/>
                            <target action="replace" type="body"/>
                        </enrich>
                    </then>
                    <else>
                        <payloadFactory media-type="json">
                            <format>$1</format>
                            <args>
                               <arg evaluator="xml" expression="$ctx:originalRequestJsonBody"/>
                            </args>
                        </payloadFactory>
                    </else>
                </filter>
            </else>
        </filter>

        <filter xpath="boolean($ctx:consentInformation)">
            <then>
                <!-- Set 'consentInformation' as an HTTP header if available -->
                <header name="Account-Request-Information" scope="transport" expression="$ctx:consentInformation"/>
            </then>
            <else>
                <!-- 'consentInformation' is null -->
            </else>
        </filter>
    </then>

    <else>
        <!-- Consent is not valid -->
        <!-- Setting required properties for generating the error response and sending the flow through the fault sequence -->
        <property name="ERROR_CODE" expression="json-eval($.errorCode)"/>
        <property name="ERROR_TITLE" value="Consent Enforcement Error"/>
        <property name="ERROR_DESCRIPTION" expression="json-eval($.errorMessage)"/>
        <property name="CUSTOM_HTTP_SC" expression="json-eval($.httpCode)"/>
        <sequence key="fault"/>
    </else>
</filter>
